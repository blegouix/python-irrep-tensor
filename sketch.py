import numpy as np

d = 4 # dimension

class Coo:
    m_ndims = np.empty(0) 
    m_idx = np.empty(0) 
    m_values = np.empty(0)

    def __init__(self, ndims):
        self.m_ndims = np.array(ndims) 
        self.m_idx = np.empty((len(ndims), 0))
        self.m_values = np.empty(0)

    def copy_construct(self, ndims, idx, values):
        self.m_ndims = np.array(ndims) 
        self.m_idx = idx
        self.m_values = np.array(values) 
    
    def append_dense(self, dense, **kwargs):
        idx = np.nonzero(dense)
        self.m_values = np.append(self.m_values, dense[idx])
        idx = np.array(idx)
        for i in range(0, idx.shape[1]):
            idx[kwargs.get('axis', None), i] = self.m_ndims[kwargs.get('axis', None)]
        self.m_ndims[kwargs.get('axis', None)] = self.m_ndims[kwargs.get('axis', None)]+1
        self.m_idx = np.append(self.m_idx, idx, 1)

    def append_coo(self, coo, **kwargs):
        self.m_values = np.append(self.m_values, coo.m_values)
        self.m_ndims[kwargs.get('axis', None)] = self.m_ndims[kwargs.get('axis', None)]+1
        self.m_idx = np.append(self.m_idx, coo.m_idx, 1)

    # /!\ support only coalescent axis
    def get(self, id, **kwargs):
        i = 0
        ndims = np.copy(self.m_ndims)
        ndims[kwargs.get('axis', None)] = 0
        coo = Coo(ndims)
        coo_ = Coo(ndims) # trick to enforce correct indexing along axis
        while i<self.m_idx.shape[1] and self.m_idx[kwargs.get('axis', None), i]<=id:
            if self.m_idx[kwargs.get('axis', None), i]==id:
                coo_to_add = Coo(ndims)
                coo_to_add.copy_construct(ndims, np.expand_dims(self.m_idx[:,i], axis=-1), self.m_values[i])
                coo_.append_coo(coo_to_add, axis=kwargs.get('axis', None))
            i = i+1
        coo.append_coo(coo_, axis=kwargs.get('axis', None)) 
        
        #enforce id=0 in the axis orthogonal to the slice
        coo.m_idx[kwargs.get('axis', None), :] = 0
        return coo 
                
        
def coo2dense(coo):
    dense = np.zeros(coo.m_ndims);
    for i in range(0, np.size(coo.m_values)):
        dense[tuple([int(coo.m_idx[j, i]) for j in range(0,len(coo.m_ndims))])] = coo.m_values[i]
    return dense

# Create rank-2 identity operator
I = np.zeros((d, d, d, d))

for i in range(0,d):
    for j in range(0,d):
        for k in range(0,d):
            for l in range(0,d):
                if i==k and j==l:
                    I[i,j,k,l] = 1

# Create rank-2 transpose operator
Tr = np.zeros((d, d, d, d))

for i in range(0,d):
    for j in range(0,d):
        for k in range(0,d):
            for l in range(0,d):
                if i==l and j==k:
                    Tr[i,j,k,l] = 1
# Create symmetric projection
Sym = (Tr+I)/2

# Create antisymmetric projection
AntiSym = (Tr-I)/2

# Gram-shmidt approach to produce from vec an orthogonal vector to the vector space generated by basis
def orthogonalize(vec, basis):
    for i in range(0,basis.m_ndims[-1]):
        eigentensor = coo2dense(basis.get(i, axis=2)).reshape(d,d)
        vec = vec - np.tensordot(vec, eigentensor)/np.tensordot(eigentensor, eigentensor)*eigentensor
    return vec

# Build orthonormal basis for the eigen subspace associated to the eigenvalue 1 of the projection operator
def orthonormal_basis_subspace_eigenvalue_1(Proj):
    U = Coo((0,d,d)); 
    V = Coo((d,d,0)); 

    index = 0;
    # while np.size(V, axis=2)<d*(d+1)//2:
    while V.m_ndims[2]<d*(d-1)//2:
        index = index+1;
        candidate = np.zeros((d, d))
        for i in range(0,d):
            for j in range(0,d):
                candidate[i,j] = index//2**(i*d+j)%2
        # candidate = np.tensordot(Proj, np.random.randint(2, size=(d,d)));
        v = orthogonalize(np.tensordot(Proj, candidate), V);

        if np.any(v>0.25):
            v = v/np.sqrt(np.tensordot(v, v)) # normalize
            u = np.tensordot(np.tensordot(Tr, Proj), v) # not sure if this or u = v is correct
            # u = v 
            U.append_dense(u.reshape(1,d,d), axis=0)
            V.append_dense(v.reshape(d,d,1), axis=2)
    return [U, V] 

#test
test = np.empty((d,d))

for i in range(0,d):
    for j in range(0,d):
        test[i,j] = j-i
print(test)

[U, V] = orthonormal_basis_subspace_eigenvalue_1(AntiSym)
print(U.m_idx)
print(U.m_values)
compressed_test = np.tensordot(coo2dense(U), test, axes=2)
uncompressed_test  = np.tensordot(coo2dense(V), compressed_test, axes=1)
print(np.all(abs(uncompressed_test-test)<1e-14))
